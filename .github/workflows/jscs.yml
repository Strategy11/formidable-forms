name: Inspections

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, labeled, synchronize]

jobs:
  runESLintInspection:
    if: contains(github.event.pull_request.labels.*.name, 'run analysis')
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20.10.0"
          cache: "npm"
          cache-dependency-path: package-lock.json
          # Ensure caching is enabled even if packageManager field is missing
          package-manager-cache: true

      - name: Debug - Package-lock.json analysis
        run: |
          echo "üìã PACKAGE-LOCK.JSON ANALYSIS:"
          echo "File exists: $([ -f package-lock.json ] && echo 'YES' || echo 'NO')"
          if [ -f package-lock.json ]; then
            echo "File size: $(stat -c%s package-lock.json) bytes"
            echo "Last modified: $(stat -c%y package-lock.json)"
            echo "File hash: ${{ hashFiles('**/package-lock.json') }}"
          fi
          echo "Generated cache key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}"
          echo ""
          echo "üîç CACHE LOGIC: Any change to package-lock.json ‚Üí Different hash ‚Üí Cache miss ‚Üí npm ci runs"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          # No restore-keys - only exact matches for safety

      - name: Debug - Cache result
        run: |
          echo "üéØ CACHE DECISION:"
          echo "Cache hit: ${{ steps.npm-cache.outputs.cache-hit }}"
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ CACHE HIT - package-lock.json UNCHANGED - Dependencies will be SKIPPED"
            echo "   ‚Üí This means NO changes to dependencies, versions, or new packages"
          else
            echo "‚ùå CACHE MISS - package-lock.json CHANGED - Dependencies will be INSTALLED"
            echo "   ‚Üí This means: new dependencies, version updates, or dependency changes detected"
            echo "   ‚Üí npm ci --include=dev will run to ensure correct dependencies"
          fi

      - name: Debug - Pre-install state
        run: |
          echo "Node modules exists: $([ -d node_modules ] && echo 'YES' || echo 'NO')"
          if [ -d node_modules ]; then
            echo "Node modules count: $(find node_modules -maxdepth 1 -type d | wc -l)"
          fi

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          echo "üîÑ INSTALLING DEPENDENCIES (cache miss detected)"
          echo "üìù Reasons this could happen:"
          echo "   ‚Ä¢ New dependency added to package.json"
          echo "   ‚Ä¢ Dependency version updated"
          echo "   ‚Ä¢ package-lock.json manually changed"
          echo "   ‚Ä¢ First run or different branch"
          npm ci --include=dev
          echo "‚úÖ INSTALLATION COMPLETED - All dependencies are now correct"

      - name: Debug - Installation decision proof
        run: |
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ SKIPPED INSTALLATION - package-lock.json unchanged, used cached node_modules"
          else
            echo "‚úÖ RAN INSTALLATION - package-lock.json changed, fresh dependencies installed"
          fi

      - name: Debug - Post-install state
        run: |
          echo "Final node modules count: $(find node_modules -maxdepth 1 -type d | wc -l)"
          echo "ESLint executable exists: $([ -f ./node_modules/.bin/eslint ] && echo 'YES' || echo 'NO')"

      - name: Analyze js code style
        run: ./node_modules/.bin/eslint .
